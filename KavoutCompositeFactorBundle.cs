/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

using NodaTime;
using System;
using System.Globalization;
using System.IO;
using QuantConnect.Data;

namespace QuantConnect.DataSource
{
    /// <summary>
    /// Kavout signals are machine-learning enhanced scores that capture the returns
    /// of systematic factors such as Quality, Value, Momentum, Growth, and Low Volatility.
    /// There are many different anomalies discovered by researchers and practitioners across
    /// these factor categories, and there is no good common definition of each style
    /// across the literature.
    ///
    /// Kavout creates an ensemble score for each style that gauges the different factors
    /// considered in the literature and industry practice.
    /// 
    /// Each signal is generated by an ensemble model consisting of inputs from hundreds of anomalies.
    /// </summary>
    public class KavoutCompositeFactorBundle : BaseData
    {
        /// <summary>
        /// Growth factor score
        /// </summary>
        public decimal Growth { get; set; }
        
        /// <summary>
        /// Value factor score
        /// </summary>
        public decimal ValueFactor { get; set; }
        
        /// <summary>
        /// Quality factor score
        /// </summary>
        public decimal Quality { get; set; }
        
        /// <summary>
        /// Momentum factor score
        /// </summary>
        public decimal Momentum { get; set; }
        
        /// <summary>
        /// Low volatility factor score
        /// </summary>
        public decimal LowVolatility { get; set; }
        
        /// <summary>
        /// The time that the data became available to the algorithm
        /// </summary>
        public override DateTime EndTime { get; set; }
        
        /// <summary>
        /// Return the URL string source of the file. This will be converted to a stream
        /// </summary>
        /// <param name="config">Configuration object</param>
        /// <param name="date">Date of this source file</param>
        /// <param name="isLiveMode">true if we're in live mode, false for backtesting mode</param>
        /// <returns>String URL of source file.</returns>
        public override SubscriptionDataSource GetSource(SubscriptionDataConfig config, DateTime date, bool isLiveMode)
        {
            return new SubscriptionDataSource(
                Path.Combine(
                    Globals.DataFolder,
                    "alternative",
                    "kavout",
                    "composite_factor_bundles",
                    $"{config.Symbol.Value.ToLowerInvariant()}.csv"),
                SubscriptionTransportMedium.LocalFile,
                FileFormat.Csv);
        }

        /// <summary>
        /// Reader converts each line of the data source into BaseData objects. Each data type creates its own factory method, and returns a new instance of the object
        /// each time it is called. The returned object is assumed to be time stamped in the config.ExchangeTimeZone.
        /// </summary>
        /// <param name="config">Subscription data config setup object</param>
        /// <param name="line">Line of the source document</param>
        /// <param name="date">Date of the requested data</param>
        /// <param name="isLiveMode">true if we're in live mode, false for backtesting mode</param>
        /// <returns>Instance of the T:BaseData object generated by this line of the CSV</returns>
        public override BaseData Reader(SubscriptionDataConfig config, string line, DateTime date, bool isLiveMode)
        {
            var csv = line.Split(',');

            var time = Parse.DateTimeExact(csv[0], "yyyyMMdd", DateTimeStyles.None);
            var growth = Parse.Decimal(csv[1], NumberStyles.Any);
            var value = Parse.Decimal(csv[2], NumberStyles.Any);
            var quality = Parse.Decimal(csv[3], NumberStyles.Any);
            var momentum = Parse.Decimal(csv[4], NumberStyles.Any);
            var lowVolatility = Parse.Decimal(csv[5], NumberStyles.Any);

            return new KavoutCompositeFactorBundle
            {
                Growth = growth,
                ValueFactor = value,
                Quality = quality,
                Momentum = momentum,
                LowVolatility = lowVolatility,

                Time = time,
                EndTime = time.AddDays(1),
                Symbol = config.Symbol
            };
        }

        /// <summary>
        /// Return a new instance clone of this object, used in fill forward
        /// </summary>
        /// <returns>A clone of the current object</returns>
        public override BaseData Clone()
        {
            return new KavoutCompositeFactorBundle
            {
                Growth = Growth,
                ValueFactor = ValueFactor,
                Quality = Quality,
                Momentum = Momentum,
                LowVolatility = LowVolatility,
                
                Time = Time,
                EndTime = EndTime,
                Symbol = Symbol
            };
        }

        /// <summary>Indicates if there is support for mapping</summary>
        /// <remarks>Relies on the <see cref="P:QuantConnect.Data.BaseData.Symbol" /> property value</remarks>
        /// <returns>True indicates mapping should be used</returns>
        public override bool RequiresMapping()
        {
            return true;
        }

        /// <summary>Indicates that the data set is expected to be sparse</summary>
        /// <remarks>Relies on the <see cref="P:QuantConnect.Data.BaseData.Symbol" /> property value</remarks>
        /// <remarks>This is a method and not a property so that python
        /// custom data types can override it</remarks>
        /// <returns>True if the data set represented by this type is expected to be sparse</returns>
        public override bool IsSparseData()
        {
            return false;
        }

        /// <summary>
        /// Specifies the data time zone for this data type. This is useful for custom data types
        /// </summary>
        /// <remarks>Will throw <see cref="T:System.InvalidOperationException" /> for security types
        /// other than <see cref="F:QuantConnect.SecurityType.Base" /></remarks>
        /// <returns>The <see cref="T:NodaTime.DateTimeZone" /> of this data type</returns>
        public override DateTimeZone DataTimeZone()
        {
            return TimeZones.NewYork;
        }

        /// <summary>
        /// Formats a string with Cross-asset model data
        /// </summary>
        /// <returns>string containing Cross-asset model information</returns>
        public override string ToString()
        {
            return $"{Symbol} -- Growth Factor: {Growth}, " +
                   $"Value Factor: {ValueFactor}, " +
                   $"Quality Factor: {Quality}, " +
                   $"Momentum Factor: {Momentum}, " +
                   $"Low Volatility Factor: {LowVolatility}";
        }
    }
}